How you approach this project and when you do it is entirely up to you. Let us know roughly when you expect to work on it, just so we can plan.

I'm available for questions or discussion, so feel free to email me about anything. We can also set up a time for a call if you'd prefer to talk. This is intentionally a fairly high level description with no mockups, so asking for clarification or just discussing things in general is totally welcome.

##
## The problem
##

At Flexibits we're always interested in different ways in which we can make scheduling time easier and more automated. For example, Fantastical has proposals, which allow you to ask a group of people to find out what time works best for them. We'd like to try a different method of scheduling.

Let's say you have a team of people who work together in a group to handle incoming meetings. Requests for events may come in at different times and we want to assign the events to people fairly so that people don't get double-booked and so that one person doesn't get overloaded.

Here's a simple example:

- You have two people on a team (Alice and Bob).
- An event comes in for 8am and since nobody has any events it gets assigned to someone at random (Alice, in this case).
- An event comes in for 9am and since Bob has fewer events it gets assigned to Bob.
- An event comes in for 10am and since both people have one event it gets assigned at random again (let's say Bob this time).
- An event comes in for 8am again. Normally it would go to Alice since Bob has more events, but since there's a conflict for Alice it needs to go to Bob.

You can imagine this system scaling to many people with many events and across multiple days.

##
## What we're looking for
##

Build a Python backend that can simulate this scheduling system. We use Django for our backend, but you're welcome to use Flask or something else if you prefer. At a minimum you'll need model objects for users and events.

At a minimum, we'd like to see:

- Model objects and way to view and edit them (you can use the Django admin if you want)
- An action to create an event request and assign it to the best user (you can specify the date and time of the event or randomly generate the date and time)
- A way to visualize the schedule for each person (do this in whatever way makes the most sense to you, can print it to the console, use the Django admin, or create your own view)
- Use whatever database backend you prefer (e.g. SQLite, PostgreSQL, MySQL)
- Use source control
- A way for us to run what you build (such as venv or Docker)

Feel free to do something nonstandard or goofy if you want to experiment even if you wouldn't necessarily do it for a production system. After all this is an interview project that isn't going into production, so have fun with it :)

Ideally you'll also add at least one additional detail to take your implementation one step further. Here are some options, but if you think of something else then have at it!

- Unit tests to verify the behavior of your simulation
- A fun visualization of your results with CSS and/or JS
- Demonstrate how efficient your implementation is with profiling data or load testing
- Add additional options to the simulation. Some ideas:
    - Automatically rebalance events between people if too many conflicts occur
    - Set weights between team members (for example, maybe Alice should only have half as many events as Bob)
    - Set priorities between team members (for example, if Alice and Bob have the same number of events then prefer to schedule with Bob over Alice)

We're fully aware that there's only so much time to work on this. Cut corners, skip things, use whatever frameworks or libraries you want, or do other things that you might not normally do in a full project.

##
## Other notes
##

Other things to think about and topics we may ask about once you're done:

- What you'd do next if you had more time
- What you'd do differently if you had to start over again
- What you'd do if you had to make this into a real solution
- Ideas you came up with from a usability or feature point of view that would make the solution even better
- Places where you ran into trouble of your own making
- Places where you ran into trouble because we didn't explain the problem well or left out important information